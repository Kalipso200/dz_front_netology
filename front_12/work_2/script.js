// script.js - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Service Worker

class ServiceWorkerManager {
  constructor() {
    this.registration = null;
    this.isUpdateAvailable = false;
    this.init();
  }

  async init() {
    if ('serviceWorker' in navigator) {
      try {
        await this.registerServiceWorker();
        this.setupUpdateListener();
        this.setupOfflineDetection();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Service Worker:', error);
      }
    } else {
      console.log('‚ö†Ô∏è Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
    }
  }

  async registerServiceWorker() {
    this.registration = await navigator.serviceWorker.register('/service-worker.js', {
      scope: '/'
    });

    console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', this.registration);

    // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Service Worker
    this.registration.addEventListener('updatefound', () => {
      const newWorker = this.registration.installing;
      
      newWorker.addEventListener('statechange', () => {
        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
          console.log('üîÑ –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!');
          this.showUpdateNotification();
        }
      });
    });
  }

  setupUpdateListener() {
    let refreshing = false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–≥–¥–∞ –Ω–æ–≤—ã–π Service Worker —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
    navigator.serviceWorker.addEventListener('controllerchange', () => {
      if (!refreshing) {
        refreshing = true;
        console.log('üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Service Worker');
        window.location.reload();
      }
    });
  }

  setupOfflineDetection() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ–ª–∞–π–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    window.addEventListener('online', () => {
      this.showNotification('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
      this.syncData();
    });

    window.addEventListener('offline', () => {
      this.showNotification('üåê –í—ã –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ', 'warning');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    if (!navigator.onLine) {
      this.showNotification('üåê –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ', 'info');
    }
  }

  showUpdateNotification() {
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #4CAF50;
      color: white;
      padding: 15px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 10000;
      cursor: pointer;
      animation: slideIn 0.3s ease;
    `;
    
    notification.innerHTML = `
      <div style="display: flex; align-items: center; gap: 10px;">
        <span style="font-size: 1.2em;">üîÑ</span>
        <div>
          <strong>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!</strong>
          <div style="font-size: 0.9em; opacity: 0.9;">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</div>
        </div>
      </div>
    `;

    notification.addEventListener('click', () => {
      this.updateApp();
      notification.remove();
    });

    document.body.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 10000);
  }

  async updateApp() {
    if (this.registration && this.registration.waiting) {
      console.log('üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é Service Worker...');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ Service Worker –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      this.registration.waiting.postMessage({ type: 'SKIP_WAITING' });
    }
  }

  showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    const bgColor = type === 'success' ? '#4CAF50' : 
                    type === 'warning' ? '#FF9800' : 
                    type === 'error' ? '#f44336' : '#2196F3';
    
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${bgColor};
      color: white;
      padding: 12px 20px;
      border-radius: 6px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 9999;
      animation: slideIn 0.3s ease;
      max-width: 300px;
    `;
    
    notification.textContent = message;
    document.body.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (notification.parentNode) {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => notification.remove(), 300);
      }
    }, 5000);
  }

  async syncData() {
    try {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (this.registration && this.registration.sync) {
        await this.registration.sync.register('background-sync');
        console.log('üîÑ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
  async updateCache() {
    if (this.registration && this.registration.active) {
      this.registration.active.postMessage({ type: 'UPDATE_CACHE' });
      this.showNotification('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞...', 'info');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Service Worker
  getStatus() {
    return {
      isSupported: 'serviceWorker' in navigator,
      isControlled: !!navigator.serviceWorker.controller,
      isOnline: navigator.onLine,
      registration: this.registration
    };
  }
}

// –°—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
const style = document.createElement('style');
style.textContent = `
  @keyframes slideIn {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }
  
  @keyframes slideOut {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(100%); opacity: 0; }
  }
`;
document.head.appendChild(style);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  window.serviceWorkerManager = new ServiceWorkerManager();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Service Worker –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  if ('serviceWorker' in navigator) {
    const statusInfo = document.createElement('div');
    statusInfo.style.cssText = `
      position: fixed;
      bottom: 10px;
      left: 10px;
      background: rgba(0,0,0,0.8);
      color: white;
      padding: 8px 12px;
      border-radius: 4px;
      font-size: 12px;
      z-index: 9998;
    `;
    
    statusInfo.innerHTML = `
      <div>SW: <span id="sw-status">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span></div>
      <div>–°–µ—Ç—å: <span id="network-status">${navigator.onLine ? '‚úÖ –û–Ω–ª–∞–π–Ω' : 'üåê –û—Ñ–ª–∞–π–Ω'}</span></div>
    `;
    
    document.body.appendChild(statusInfo);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏
    window.addEventListener('online', () => {
      document.getElementById('network-status').textContent = '‚úÖ –û–Ω–ª–∞–π–Ω';
    });
    
    window.addEventListener('offline', () => {
      document.getElementById('network-status').textContent = 'üåê –û—Ñ–ª–∞–π–Ω';
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async function checkForUpdates() {
  if (window.serviceWorkerManager && window.serviceWorkerManager.registration) {
    try {
      await window.serviceWorkerManager.registration.update();
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
    }
  }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
setInterval(checkForUpdates, 30 * 60 * 1000);
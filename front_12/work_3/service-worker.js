
const CACHE_NAME = 'app-cache-v1.2.0';
const OFFLINE_CACHE = 'offline-cache-v1';
const URLS_TO_CACHE = [
  '/',
  '/index.html',
  '/styles/main.css',
  '/script.js',
  '/manifest.json',
  '/offline.html',
  '/images/icon-192x192.png',
  '/images/icon-512x512.png'
];

// –°–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Service Worker
self.addEventListener('install', (event) => {
  console.log('üõ†Ô∏è Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞...');
  
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('üì¶ Service Worker: –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...');
        return cache.addAll(URLS_TO_CACHE);
      })
      .then(() => {
        console.log('‚úÖ Service Worker: –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω—ã');
        return self.skipWaiting(); // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
      })
      .catch((error) => {
        console.error('‚ùå Service Worker: –û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      })
  );
});

// –°–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Service Worker
self.addEventListener('activate', (event) => {
  console.log('üéØ Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è...');
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–µ—à–∏
          if (cacheName !== CACHE_NAME && cacheName !== OFFLINE_CACHE) {
            console.log('üóëÔ∏è Service Worker: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
    .then(() => {
      console.log('‚úÖ Service Worker: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      return self.clients.claim(); // –ë–µ—Ä–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    })
  );
});

// –°–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', (event) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã –∏ chrome-extension
  if (event.request.method !== 'GET' || 
      event.request.url.startsWith('chrome-extension://')) {
    return;
  }

  event.respondWith(
    caches.match(event.request)
      .then((cachedResponse) => {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–µ
        if (cachedResponse) {
          console.log('üìÇ Service Worker: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫–µ—à–∞:', event.request.url);
          return cachedResponse;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ - –¥–µ–ª–∞–µ–º —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å
        return fetch(event.request)
          .then((networkResponse) => {
            // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, —Ç.–∫. –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            const responseToCache = networkResponse.clone();

            // –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if (networkResponse.status === 200) {
              caches.open(CACHE_NAME)
                .then((cache) => {
                  console.log('üíæ Service Worker: –ö–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å:', event.request.url);
                  cache.put(event.request, responseToCache);
                })
                .catch((error) => {
                  console.error('‚ùå Service Worker: –û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
                });
            }

            return networkResponse;
          })
          .catch((error) => {
            console.log('üåê Service Worker: –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –¥–ª—è:', event.request.url);
            
            // –î–ª—è HTML –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º offline —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (event.request.headers.get('accept')?.includes('text/html')) {
              return caches.match('/offline.html');
            }
            
            // –î–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω –æ—Ç–≤–µ—Ç
            if (event.request.url.includes('/api/')) {
              return new Response(
                JSON.stringify({
                  error: '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º',
                  message: '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏.',
                  timestamp: new Date().toISOString()
                }),
                {
                  status: 503,
                  statusText: 'Service Unavailable',
                  headers: { 'Content-Type': 'application/json' }
                }
              );
            }
            
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –∫–µ—à–µ
            return caches.match(event.request);
          });
      })
  );
});

// –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'UPDATE_CACHE') {
    updateCache();
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
async function updateCache() {
  console.log('üîÑ Service Worker: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞...');
  
  try {
    const cache = await caches.open(CACHE_NAME);
    const requests = await cache.keys();
    
    for (const request of requests) {
      try {
        const networkResponse = await fetch(request);
        if (networkResponse.status === 200) {
          await cache.put(request, networkResponse.clone());
          console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ—Å—É—Ä—Å:', request.url);
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å:', request.url);
      }
    }
    
    console.log('üéâ Service Worker: –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå Service Worker: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞:', error);
  }
}

// –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync') {
    console.log('üîÑ Service Worker: –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
    event.waitUntil(doBackgroundSync());
  }
});

async function doBackgroundSync() {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
  console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
}
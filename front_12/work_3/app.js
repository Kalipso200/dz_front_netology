// app.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

class StatusManager {
    constructor() {
        this.notifications = [];
        this.init();
    }

    init() {
        this.setupNetworkListener();
        this.setupAuthListener();
        this.updateTime();
        this.checkInitialStatus();
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    setupNetworkListener() {
        window.addEventListener('online', () => {
            this.handleOnline();
        });

        window.addEventListener('offline', () => {
            this.handleOffline();
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        this.updateNetworkStatus(navigator.onLine);
    }

    updateNetworkStatus(isOnline) {
        const networkStatus = document.getElementById('network-status');
        const globalStatus = document.getElementById('global-status');

        if (isOnline) {
            networkStatus.className = 'status-indicator online';
            networkStatus.innerHTML = `
                <span class="status-indicator__icon">üåê</span>
                <span class="status-indicator__text">–û–Ω–ª–∞–π–Ω</span>
            `;
            globalStatus.textContent = '–û–Ω–ª–∞–π–Ω';
            globalStatus.style.color = 'var(--color-success)';
        } else {
            networkStatus.className = 'status-indicator offline';
            networkStatus.innerHTML = `
                <span class="status-indicator__icon">üì¥</span>
                <span class="status-indicator__text">–û—Ñ–ª–∞–π–Ω</span>
            `;
            globalStatus.textContent = '–û—Ñ–ª–∞–π–Ω';
            globalStatus.style.color = 'var(--color-error)';
        }
    }

    handleOnline() {
        this.updateNetworkStatus(true);
        this.showNotification({
            title: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
            message: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ',
            type: 'success',
            icon: '‚úÖ'
        });
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.syncData();
    }

    handleOffline() {
        this.updateNetworkStatus(false);
        this.showNotification({
            title: '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º',
            message: '–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
            type: 'warning',
            icon: 'üåê'
        });
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    setupAuthListener() {
        this.updateAuthStatus();
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
        window.addEventListener('storage', (e) => {
            if (e.key === 'auth_token' || e.key === 'user_data') {
                this.updateAuthStatus();
            }
        });
    }

    updateAuthStatus() {
        const token = this.getToken();
        const user = this.getUser();
        const isAuthenticated = !!(token && user);

        const guestIndicator = document.getElementById('guest-indicator');
        const userIndicator = document.getElementById('user-indicator');
        const userName = document.getElementById('user-name');
        const contentPage = document.getElementById('content-page');
        const loginPage = document.getElementById('login-page');

        if (isAuthenticated) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            guestIndicator.classList.add('hidden');
            userIndicator.classList.remove('hidden');
            userName.textContent = user.name || user.email;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            contentPage.classList.remove('hidden');
            loginPage.classList.add('hidden');
            
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            guestIndicator.classList.remove('hidden');
            userIndicator.classList.add('hidden');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
            contentPage.classList.add('hidden');
            loginPage.classList.remove('hidden');
            
            console.log('üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    showNotification({ title, message, type = 'info', icon = '‚ÑπÔ∏è', duration = 5000 }) {
        const notificationsContainer = document.getElementById('notifications');
        const notificationId = Date.now().toString();
        
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.id = `notification-${notificationId}`;
        
        notification.innerHTML = `
            <div class="notification__icon">${icon}</div>
            <div class="notification__content">
                <div class="notification__title">${title}</div>
                <div class="notification__message">${message}</div>
            </div>
        `;
        
        notificationsContainer.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            this.hideNotification(notificationId);
        }, duration);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.notifications.push(notificationId);
        
        return notificationId;
    }

    hideNotification(notificationId) {
        const notification = document.getElementById(`notification-${notificationId}`);
        if (notification) {
            notification.classList.add('fade-out');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
                // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞
                this.notifications = this.notifications.filter(id => id !== notificationId);
            }, 300);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getToken() {
        return localStorage.getItem('auth_token');
    }

    getUser() {
        const userData = localStorage.getItem('user_data');
        return userData ? JSON.parse(userData) : null;
    }

    saveAuthData(token, user) {
        localStorage.setItem('auth_token', token);
        localStorage.setItem('user_data', JSON.stringify(user));
        this.updateAuthStatus();
    }

    clearAuthData() {
        localStorage.removeItem('auth_token');
        localStorage.removeItem('user_data');
        this.updateAuthStatus();
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    async syncData() {
        // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
        this.showNotification({
            title: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è',
            message: '–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
            type: 'info',
            icon: 'üîÑ'
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
    updateTime() {
        const timeElement = document.getElementById('current-time');
        const updateTime = () => {
            const now = new Date();
            timeElement.textContent = now.toLocaleTimeString('ru-RU');
        };
        
        updateTime();
        setInterval(updateTime, 1000);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    checkInitialStatus() {
        this.updateNetworkStatus(navigator.onLine);
        this.updateAuthStatus();
        
        if (!navigator.onLine) {
            this.handleOffline();
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
const statusManager = new StatusManager();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
function simulateNetworkChange() {
    const isOnline = navigator.onLine;
    
    if (isOnline) {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∏
        statusManager.handleOffline();
    } else {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
        statusManager.handleOnline();
    }
}

function checkAuthStatus() {
    const token = statusManager.getToken();
    const user = statusManager.getUser();
    
    if (token && user) {
        statusManager.showNotification({
            title: '–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            message: `–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ ${user.email}`,
            type: 'success',
            icon: '‚úÖ'
        });
    } else {
        statusManager.showNotification({
            title: '–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            message: '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ',
            type: 'warning',
            icon: 'üîê'
        });
    }
}

function showLogin() {
    document.getElementById('content-page').classList.add('hidden');
    document.getElementById('login-page').classList.remove('hidden');
}

function logout() {
    statusManager.clearAuthData();
    statusManager.showNotification({
        title: '–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
        message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
        type: 'info',
        icon: 'üö™'
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
document.getElementById('login-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;
    const loginBtn = document.getElementById('login-btn');
    const loading = document.getElementById('loading');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!validateEmail(email)) {
        showError('email-error', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
        return;
    }
    
    if (password.length < 6) {
        showError('password-error', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    loginBtn.disabled = true;
    loading.classList.remove('hidden');
    
    try {
        // –ò–º–∏—Ç–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        if (email === 'demo@example.com' && password === '123456') {
            // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            const userData = {
                id: 1,
                email: email,
                name: 'Demo User'
            };
            
            const token = 'demo_jwt_token_' + Date.now();
            
            statusManager.saveAuthData(token, userData);
            
            statusManager.showNotification({
                title: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
                message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userData.name}!`,
                type: 'success',
                icon: 'üéâ'
            });
        } else {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
        }
    } catch (error) {
        statusManager.showNotification({
            title: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞',
            message: error.message,
            type: 'error',
            icon: '‚ùå'
        });
    } finally {
        loginBtn.disabled = false;
        loading.classList.add('hidden');
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function showError(elementId, message) {
    const element = document.getElementById(elementId);
    element.textContent = message;
    element.style.display = 'block';
}

function hideError(elementId) {
    const element = document.getElementById(elementId);
    element.style.display = 'none';
}

// Real-time –≤–∞–ª–∏–¥–∞—Ü–∏—è
document.getElementById('email').addEventListener('input', () => {
    hideError('email-error');
});

document.getElementById('password').addEventListener('input', () => {
    hideError('password-error');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
});
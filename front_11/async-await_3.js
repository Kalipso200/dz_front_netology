// async-await.js

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
 * @param {number} ms - –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Promise} - Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
 */
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º async/await
 * @param {string} url - URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 * @param {number} delayMs - –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Promise} - Promise —Å –¥–∞–Ω–Ω—ã–º–∏
 */
async function fetchData(url, delayMs = 2000) {
    console.log(`üîÑ –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫: ${url}`);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    await delay(delayMs);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç URL
    if (url === '/api/users') {
        console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω');
        return {
            status: 'success',
            data: [
                { id: 1, name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', email: 'ivan@example.com' },
                { id: 2, name: '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', email: 'petr@example.com' },
                { id: 3, name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', email: 'maria@example.com' }
            ]
        };
    } else if (url.startsWith('/api/users/')) {
        const userId = url.split('/').pop();
        console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${userId} –≤—ã–ø–æ–ª–Ω–µ–Ω`);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const userData = {
            '1': {
                id: 1,
                name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
                email: 'ivan@example.com',
                age: 28,
                city: '–ú–æ—Å–∫–≤–∞',
                registrationDate: '2020-05-15',
                role: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
            },
            '2': {
                id: 2,
                name: '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', 
                email: 'petr@example.com',
                age: 32,
                city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                registrationDate: '2019-08-22',
                role: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'
            },
            '3': {
                id: 3,
                name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Äova',
                email: 'maria@example.com', 
                age: 25,
                city: '–ö–∞–∑–∞–Ω—å',
                registrationDate: '2021-01-10',
                role: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            }
        };
        
        if (userData[userId]) {
            return {
                status: 'success',
                data: userData[userId]
            };
        } else {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
    } else if (url === '/api/error') {
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏
        console.log('‚ùå –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ');
        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } else {
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π endpoint: ${url}`);
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function displayUserInfo(user) {
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    console.log('‚îÇ üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    console.log(`‚îÇ ID: ${user.id}`);
    console.log(`‚îÇ –ò–º—è: ${user.name}`);
    console.log(`‚îÇ Email: ${user.email}`);
    console.log(`‚îÇ –í–æ–∑—Ä–∞—Å—Ç: ${user.age}`);
    console.log(`‚îÇ –ì–æ—Ä–æ–¥: ${user.city}`);
    console.log(`‚îÇ –†–æ–ª—å: ${user.role}`);
    console.log(`‚îÇ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.registrationDate}`);
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
}

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise} - Promise —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
async function processUserData(user) {
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await delay(1000);
    
    return {
        ...user,
        processedAt: new Date().toISOString(),
        isActive: true,
        profileComplete: user.age && user.city ? 100 : 50,
        lastLogin: new Date().toLocaleDateString()
    };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º async/await
 */
async function main() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–ò –° ASYNC/AWAIT\n');
    
    try {
        // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('1. üìã –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const usersResponse = await fetchData('/api/users');
        console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω:', usersResponse.data.map(u => u.name));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await delay(500);
        console.log('\n‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏...\n');
        
        // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        console.log('2. üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
        const firstUser = usersResponse.data[0];
        const userResponse = await fetchData(`/api/users/${firstUser.id}`);
        
        // –®–∞–≥ 3: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        console.log('\n3. üë§ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
        displayUserInfo(userResponse.data);
        
        // –®–∞–≥ 4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        console.log('\n4. üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const processedData = await processUserData(userResponse.data);
        
        // –®–∞–≥ 5: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\n5. ‚úÖ –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:');
        console.log('   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', processedData.processedAt);
        console.log('   - –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', processedData.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω');
        console.log('   - –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è:', processedData.profileComplete + '%');
        console.log('   - –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:', processedData.lastLogin);
        
        console.log('\nüéØ –û–°–ù–û–í–ù–ê–Ø –¶–ï–ü–û–ß–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!');
        
    } catch (error) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê –í –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–ò:');
        console.error('   –¢–∏–ø –æ—à–∏–±–∫–∏:', error.name);
        console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        console.error('   –í—Ä–µ–º—è –æ—à–∏–±–∫–∏:', new Date().toLocaleTimeString());
    } finally {
        console.log('\nüèÅ –ë–õ–û–ö FINALLY: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
}

/**
 * –ü—Ä–∏–º–µ—Ä —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
 */
async function sequentialRequests() {
    console.log('\n\nüîÑ –ü–†–ò–ú–ï–† –° –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ú–ò –ó–ê–ü–†–û–°–ê–ú–ò\n');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        const usersResponse = await fetchData('/api/users');
        
        for (let i = 0; i < usersResponse.data.length; i++) {
            const user = usersResponse.data[i];
            console.log(`\nüì• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${i + 1}: ${user.name}`);
            
            const userDetails = await fetchData(`/api/users/${user.id}`, 1000);
            displayUserInfo(userDetails.data);
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (i < usersResponse.data.length - 1) {
                console.log('\n‚è∏Ô∏è  –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...');
                await delay(1500);
            }
        }
        
        console.log('\n‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö:', error.message);
    }
}

/**
 * –ü—Ä–∏–º–µ—Ä —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
 */
async function parallelRequests() {
    console.log('\n\n‚ö° –ü–†–ò–ú–ï–† –° PARALLEL –ó–ê–ü–†–û–°–ê–ú–ò\n');
    
    try {
        console.log('–ó–∞–ø—É—Å–∫–∞–µ–º 3 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞...');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [user1, user2, user3] = await Promise.all([
            fetchData('/api/users/1', 1500),
            fetchData('/api/users/2', 2000),
            fetchData('/api/users/3', 1000)
        ]);
        
        console.log('\n‚úÖ –í–°–ï PARALLEL –ó–ê–ü–†–û–°–´ –í–´–ü–û–õ–ù–ï–ù–´:');
        console.log(`   - ${user1.data.name}: ${user1.data.role}`);
        console.log(`   - ${user2.data.name}: ${user2.data.role}`);
        console.log(`   - ${user3.data.name}: ${user3.data.role}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ parallel –∑–∞–ø—Ä–æ—Å–∞—Ö:', error.message);
    }
}

/**
 * –ü—Ä–∏–º–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
async function errorHandlingExample() {
    console.log('\n\nüö® –ü–†–ò–ú–ï–† –° –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö\n');
    
    try {
        console.log('1. –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –æ—à–∏–±–∫–æ–π...');
        await fetchData('/api/error');
        
    } catch (error) {
        console.error('2. ‚ùå –û–®–ò–ë–ö–ê –ü–ï–†–ï–•–í–ê–ß–ï–ù–ê:');
        console.error('   - –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        console.error('   - –í—Ä–µ–º—è:', new Date().toLocaleTimeString());
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∑–∞–ø–∞—Å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
        console.log('\n3. üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        await delay(1000);
        
        const fallbackData = {
            status: 'success',
            data: {
                id: 0,
                name: '–ì–æ—Å—Ç–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                email: 'guest@example.com',
                age: null,
                city: '–ù–µ —É–∫–∞–∑–∞–Ω',
                role: '–ì–æ—Å—Ç—å',
                registrationDate: new Date().toISOString()
            }
        };
        
        console.log('4. ‚úÖ –ó–ê–ü–ê–°–ù–´–ï –î–ê–ù–ù–´–ï –ó–ê–ì–†–£–ñ–ï–ù–´:');
        displayUserInfo(fallbackData.data);
    }
}

/**
 * –ü—Ä–∏–º–µ—Ä —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ async/await —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 */
async function nestedAsyncExample() {
    console.log('\n\nüèóÔ∏è –ü–†–ò–ú–ï–† –° –í–õ–û–ñ–ï–ù–ù–´–ú–ò ASYNC –§–£–ù–ö–¶–ò–Ø–ú–ò\n');
    
    async function getUserProfile(userId) {
        console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
        await delay(800);
        return await fetchData(`/api/users/${userId}`);
    }
    
    async function getUserPermissions(userId) {
        console.log(`üîê –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
        await delay(600);
        return {
            canRead: true,
            canWrite: userId === '1',
            canDelete: userId === '1'
        };
    }
    
    try {
        const [profile, permissions] = await Promise.all([
            getUserProfile('1'),
            getUserPermissions('1')
        ]);
        
        console.log('\n‚úÖ –ü–†–û–§–ò–õ–¨ –ò –ü–†–ê–í–ê –ü–û–õ–£–ß–ï–ù–´:');
        console.log('   - –ò–º—è:', profile.data.name);
        console.log('   - –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å:', permissions.canWrite ? '–î–∞' : '–ù–µ—Ç');
        console.log('   - –ü—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ:', permissions.canDelete ? '–î–∞' : '–ù–µ—Ç');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
async function runAllExamples() {
    console.log('üåü –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ASYNC/AWAIT –° –ó–ê–î–ï–†–ñ–ö–ê–ú–ò\n');
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä
    await main();
    
    // –î—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –º–µ–∂–¥—É –Ω–∏–º–∏
    await delay(2000);
    await sequentialRequests();
    
    await delay(2000);
    await parallelRequests();
    
    await delay(2000);
    await errorHandlingExample();
    
    await delay(2000);
    await nestedAsyncExample();
    
    console.log('\n\nüéâ –í–°–ï –ü–†–ò–ú–ï–†–´ –ó–ê–í–ï–†–®–ï–ù–´!');
    console.log('Async/await –¥–µ–ª–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ —á–∏—Ç–∞–µ–º—ã–º –∏ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–º!');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
runAllExamples().catch(error => {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
});

// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–†–ò–ú–ï–†: –û–∂–∏–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º
async function withTimeoutExample() {
    console.log('\n\n‚è∞ –ü–†–ò–ú–ï–† –° –¢–ê–ô–ú–ê–£–¢–û–ú\n');
    
    function withTimeout(promise, ms) {
        return Promise.race([
            promise,
            delay(ms).then(() => { throw new Error('–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏') })
        ]);
    }
    
    try {
        console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º 3 —Å–µ–∫—É–Ω–¥—ã...');
        const result = await withTimeout(fetchData('/api/users/1', 5000), 3000);
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result.data.name);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ (—Ç–∞–π–º–∞—É—Ç):', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
setTimeout(() => {
    withTimeoutExample();
}, 25000);
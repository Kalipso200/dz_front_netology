// promise-chain.js

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
 * @param {string} url - URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 * @param {number} delay - –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Promise} - Promise —Å –¥–∞–Ω–Ω—ã–º–∏
 */
function fetchData(url, delay = 2000) {
    console.log(`üîÑ –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫: ${url}`);
    
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç URL
            if (url === '/api/users') {
                console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω');
                resolve({
                    status: 'success',
                    data: [
                        { id: 1, name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', email: 'ivan@example.com' },
                        { id: 2, name: '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', email: 'petr@example.com' },
                        { id: 3, name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', email: 'maria@example.com' }
                    ]
                });
            } else if (url.startsWith('/api/users/')) {
                const userId = url.split('/').pop();
                console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${userId} –≤—ã–ø–æ–ª–Ω–µ–Ω`);
                
                // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const userData = {
                    '1': {
                        id: 1,
                        name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
                        email: 'ivan@example.com',
                        age: 28,
                        city: '–ú–æ—Å–∫–≤–∞',
                        registrationDate: '2020-05-15'
                    },
                    '2': {
                        id: 2,
                        name: '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', 
                        email: 'petr@example.com',
                        age: 32,
                        city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                        registrationDate: '2019-08-22'
                    },
                    '3': {
                        id: 3,
                        name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
                        email: 'maria@example.com', 
                        age: 25,
                        city: '–ö–∞–∑–∞–Ω—å',
                        registrationDate: '2021-01-10'
                    }
                };
                
                if (userData[userId]) {
                    resolve({
                        status: 'success',
                        data: userData[userId]
                    });
                } else {
                    reject(new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`));
                }
            } else if (url === '/api/error') {
                // –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏
                console.log('‚ùå –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ');
                reject(new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
            } else {
                reject(new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π endpoint: ${url}`));
            }
        }, delay);
    });
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ Promise
 */
function main() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –¶–ï–ü–û–ß–ö–ò PROMISE\n');
    
    // –¶–µ–ø–æ—á–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    fetchData('/api/users')
        .then(response => {
            console.log('\nüìã –ü–û–õ–£–ß–ï–ù –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
            console.log(response.data);
            
            // –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const firstUserId = response.data[0].id;
            console.log(`\nüîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å ID: ${firstUserId}`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π Promise –≤ —Ü–µ–ø–æ—á–∫–µ
            return fetchData(`/api/users/${firstUserId}`);
        })
        .then(userResponse => {
            console.log('\nüë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ï–†–í–û–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:');
            displayUserInfo(userResponse.data);
            
            // –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ü–µ–ø–æ—á–∫—É —Å –¥—Ä—É–≥–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
            console.log('\nüìù –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...');
            return processUserData(userResponse.data);
        })
        .then(processedData => {
            console.log('\n‚úÖ –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:');
            console.log(processedData);
            
            console.log('\nüéØ –¶–ï–ü–û–ß–ö–ê PROMISE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!');
        })
        .catch(error => {
            console.error('\n‚ùå –û–®–ò–ë–ö–ê –í –¶–ï–ü–û–ß–ö–ï:');
            console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
            console.error('–°—Ç–µ–∫:', error.stack);
        })
        .finally(() => {
            console.log('\nüèÅ –ë–õ–û–ö FINALLY: –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π)');
        });
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function displayUserInfo(user) {
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    console.log('‚îÇ üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    console.log(`‚îÇ ID: ${user.id}`);
    console.log(`‚îÇ –ò–º—è: ${user.name}`);
    console.log(`‚îÇ Email: ${user.email}`);
    console.log(`‚îÇ –í–æ–∑—Ä–∞—Å—Ç: ${user.age}`);
    console.log(`‚îÇ –ì–æ—Ä–æ–¥: ${user.city}`);
    console.log(`‚îÇ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.registrationDate}`);
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
}

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise} - Promise —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
function processUserData(user) {
    return new Promise((resolve) => {
        setTimeout(() => {
            const processedData = {
                ...user,
                processedAt: new Date().toISOString(),
                isActive: true,
                profileComplete: user.age && user.city ? 100 : 50
            };
            resolve(processedData);
        }, 1000);
    });
}

/**
 * –ü—Ä–∏–º–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
function errorExample() {
    console.log('\n\nüö® –ü–†–ò–ú–ï–† –° –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö\n');
    
    fetchData('/api/error')
        .then(response => {
            console.log('–≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
            return response;
        })
        .catch(error => {
            console.error('‚ùå –ü–ï–†–ï–•–í–ê–ß–ï–ù–ê –û–®–ò–ë–ö–ê:');
            console.error('–¢–∏–ø:', error.name);
            console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
            
            // –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
            return { status: 'error', message: '–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' };
        })
        .then(result => {
            console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–°–õ–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–ö–ò:');
            console.log(result);
        });
}

/**
 * –ü—Ä–∏–º–µ—Ä —Å Promise.all –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
function parallelExample() {
    console.log('\n\nüîÑ –ü–†–ò–ú–ï–† –° PARALLEL –ó–ê–ü–†–û–°–ê–ú–ò (Promise.all)\n');
    
    const userRequests = [
        fetchData('/api/users/1', 1500),
        fetchData('/api/users/2', 1000),
        fetchData('/api/users/3', 2000)
    ];
    
    Promise.all(userRequests)
        .then(responses => {
            console.log('\n‚úÖ –í–°–ï PARALLEL –ó–ê–ü–†–û–°–´ –í–´–ü–û–õ–ù–ï–ù–´:');
            responses.forEach((response, index) => {
                console.log(`\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}:`, response.data.name);
            });
        })
        .catch(error => {
            console.error('‚ùå –û–®–ò–ë–ö–ê –í PARALLEL –ó–ê–ü–†–û–°–ê–•:', error.message);
        });
}

/**
 * –ü—Ä–∏–º–µ—Ä —Å Promise.race
 */
function raceExample() {
    console.log('\n\nüèéÔ∏è –ü–†–ò–ú–ï–† –° Promise.race\n');
    
    const fastRequest = fetchData('/api/users/1', 500);
    const slowRequest = fetchData('/api/users/2', 3000);
    
    Promise.race([fastRequest, slowRequest])
        .then(winner => {
            console.log('üéâ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ Promise.race:');
            console.log('–î–∞–Ω–Ω—ã–µ:', winner.data);
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –≤ Promise.race:', error.message);
        });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
console.log('üåü –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –° PROMISE\n');

// –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞
main();

// –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã
setTimeout(() => {
    errorExample();
}, 8000);

setTimeout(() => {
    parallelExample();
}, 12000);

setTimeout(() => {
    raceExample();
}, 16000);

// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´:

/**
 * –ü—Ä–∏–º–µ—Ä —Å async/await (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
 */
async function asyncAwaitExample() {
    console.log('\n\n‚è≥ –ó–ê–ü–£–°–ö ASYNC/AWAIT –ü–†–ò–ú–ï–†–ê\n');
    
    try {
        console.log('1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const usersResponse = await fetchData('/api/users');
        
        console.log('2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
        const userResponse = await fetchData(`/api/users/${usersResponse.data[1].id}`);
        
        console.log('3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
        const processedData = await processUserData(userResponse.data);
        
        console.log('\n‚úÖ ASYNC/AWAIT –†–ï–ó–£–õ–¨–¢–ê–¢:');
        displayUserInfo(processedData);
        
    } catch (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –í ASYNC/AWAIT:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ async/await –ø—Ä–∏–º–µ—Ä–∞
setTimeout(() => {
    asyncAwaitExample();
}, 20000);

/**
 * –û–ñ–ò–î–ê–ï–ú–´–ô –í–´–í–û–î –ü–†–û–ì–†–ê–ú–ú–´:
 * 
 * üöÄ –ó–ê–ü–£–°–ö –¶–ï–ü–û–ß–ö–ò PROMISE
 * üîÑ –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫: /api/users
 * ‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω
 * 
 * üìã –ü–û–õ–£–ß–ï–ù –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:
 * [...]
 * üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å ID: 1
 * üîÑ –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫: /api/users/1
 * ‚úÖ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω
 * 
 * üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ï–†–í–û–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:
 * ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * ‚îÇ üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï
 * ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * ‚îÇ ID: 1
 * ‚îÇ –ò–º—è: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤
 * ‚îÇ Email: ivan@example.com
 * ‚îÇ –í–æ–∑—Ä–∞—Å—Ç: 28
 * ‚îÇ –ì–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞
 * ‚îÇ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: 2020-05-15
 * ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * 
 * üìù –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...
 * ‚úÖ –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:
 * { ... }
 * 
 * üéØ –¶–ï–ü–û–ß–ö–ê PROMISE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!
 * üèÅ –ë–õ–û–ö FINALLY: –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π)
 */